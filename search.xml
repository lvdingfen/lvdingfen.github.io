<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kubernetes</title>
      <link href="/2019/07/24/kubernetes/"/>
      <url>/2019/07/24/kubernetes/</url>
      
        <content type="html"><![CDATA[<p>“”<br>Kubernetes<br><img src="/.io//1.jpg" alt="&quot;kubernetes&quot;"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2019/07/23/yuan-xing-mo-shi/"/>
      <url>/2019/07/23/yuan-xing-mo-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2019/07/22/jian-zao-zhe-mo-shi/"/>
      <url>/2019/07/22/jian-zao-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>建造者模式:将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示~</p><p>工厂模式主要是为了创建对象实例或者类簇(抽象工厂)，关心的是最终产出(创建)的是什么。不关心你创建的整一个过程，仅仅需要知道你最终创建的结果。所以抽象工厂模式我们得到的都是对象实例或者类簇。然而建造者模式在创建对象时要更为复杂一些，虽然其目的也是为了创建对象，但是它更多关心的是创建这个对象的整个过程，甚至于创建对象的每一个细节，比如创建一个人，我们创建的不仅仅要得到人的实例，还要关注创建人的时候，这个人应该穿什么衣服，男的还是女的，爱好都是什么。所以说建造者模式给更加注重的是创建的细节~</p><pre><code>// 创建一位人类var Human = function(param){    this.skill = param &amp;&amp; param.skill || &#39;保密&#39;;    this.hobby = param &amp;&amp; param.hobby || &#39;保密&#39;;}// 类原型方法// prototype：原型Human.prototype = {    getSkill : function(){       return this.skill;    },    getHobby : function(){       return this.hobby;    }}// 实例化姓名类var Named = function(name){   var that = this;   // 构造器   // 构造函数解析姓名的姓与名   (function(name, that){     that.wholeName = name;     if(name.indexOf(&#39; &#39;) &gt; -1){        that.FirstName = name.slice(0, name.indexOf(&#39; &#39;));        that.secondName = name.slice(name.indexOf(&#39; &#39;));        //如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。     }   })(name, that);}//实例化职位var Work = function(work){   var that = this;   // 构造器   // 构造函数中通过传入的职位特征来设置相应职位以及描述   (function(work,that){          switch(work){             case &#39;code&#39;:               that.work = &#39;工程师&#39;;             case &#39;UI&#39;:             case &#39;UE&#39;:             case &#39;teach&#39;:                that.work = &#39;教师&#39;;                that.workDescript = &#39;分享也是一种快乐&#39;;             default:                that.work = work;                that.workDescript = &#39;对不起，我们还不清楚您所选择职位的相关描述&#39;;          }   })(work, that);}// 更换期望的职位Work.prototype.changeWork = function(work){   this.work = work;}// 添加对职位的描述Work.prototype.changeDescript = function(setence){   this.workDescript = setence;}</code></pre><p>创建一位应聘者<br>应聘者建造者<br>参数 name : 姓名(全名)<br>参数 work ：期望职位</p><pre><code>var Person = function(name, work){    // 创建应聘者缓存对象    var _person = new Human();    // 创建应聘者姓名解析对象    _person.name = new Named(name);    // 创建应聘者期望职位    _person.work = new Work(work);    // 将创建的应聘者对象返回    return _person;}var person = new Person(&#39;xiao ming&#39;, &#39;code&#39;);//测试console.log(person.skill);    //保密console.log(person.name.FirstName);  // xiaoconsole.log(person.work.work); //工程师console.log(person.work.workDescript);   //每一天在编程中度过person.work.changeDescript(&#39;更改一下职位描述!&#39;);console.log(person.work.workDescript);   //更改一下职位描述！</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript设计模式 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 创建型设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2019/07/20/chou-xiang-gong-han-mo-shi/"/>
      <url>/2019/07/20/chou-xiang-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>抽象工厂模式:通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例</p><p>下面代码的作用：创建这个car类其实什么都不能做，创建时没有任何属性，然而原型上的prototype上的方法也不能使用，否则会报错。但是在继承上却很有用的，因为定义了一种类，并定义了该类所必备的方法，如果在子类中没有重写这些方法，那么当调用时能找到这些方法便会报错，因为大型应用中，总会有一些子类去继承另一些父类，这些父类经常会定义一些必要的方法，却没有实现，如car类中的getPrice()和getSpedeed()方法，那么一旦用子类创建了一个对象，改对象总是应该具有一些必要的方法，但是如果这些必要的方法从父类中继承过来没有具体去重写实现，那么实例化对象便会调用父类中的这些方法，要是父类能有一个友好的提示，那么对于忘记重写子类的这些错误遗漏的避免是非常有帮助的~</p><pre class=" language-bash"><code class="language-bash">//汽车抽象类，当使用其实例对象的方法时会抛出错误var Car <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Car.prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    getPrice <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> new Error<span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>,    getSpeed <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> new Error<span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>,<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-bash"><code class="language-bash">// 抽象工厂模式var VehicleFactory  <span class="token operator">=</span> function<span class="token punctuation">(</span>subType, superType<span class="token punctuation">)</span><span class="token punctuation">{</span>    // 判断抽线工厂中是否有该抽象类    if<span class="token punctuation">(</span>typeof VehicleFactory<span class="token punctuation">[</span>superType<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      // 缓冲类      <span class="token keyword">function</span> F<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      // 继承父类属性和方法      F.prototype <span class="token operator">=</span> new VehicleFactory<span class="token punctuation">[</span>superType<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      // 将子类constructor指向子类      subType.constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span>      // 子类原型继承“父类”      subType.prototype <span class="token operator">=</span> new F<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>else<span class="token punctuation">{</span>        // 不存在该抽象类抛出错误        throw new Error<span class="token punctuation">(</span><span class="token string">'未创建该抽象类'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>// 小汽车抽象类VehicleFactory.Car <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   this.type <span class="token operator">=</span> <span class="token string">'car'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>VehicleFactory.Car.prototype <span class="token operator">=</span> <span class="token punctuation">{</span>   getPrice <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> new Error<span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>,   getSpeed <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> new Error<span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>// 公交车抽象类VehicleFactory.Bus <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   this.type <span class="token operator">=</span> <span class="token string">'bus'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>VehicleFactory.BUs.prototype <span class="token operator">=</span> <span class="token punctuation">{</span>   getPrice <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> new Error<span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>,   getPassengerNum <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> new Error<span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>,<span class="token punctuation">}</span><span class="token punctuation">;</span>// 货车抽象类VehicleFactory.Truck <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  this.type <span class="token operator">=</span> <span class="token string">'truck'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>VehicleFactory.Truck.prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  getPrice <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> new Error<span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>,  getTrainload <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> new Error<span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过抽象工厂创建子类（本例中是让子类继承父类，是对子类的扩展），所以我们需要一些产品子类，然后让子类继承相应的产品簇抽象类</p><pre class=" language-bash"><code class="language-bash">//宝马子类var BMW <span class="token operator">=</span> function<span class="token punctuation">(</span>price,speed<span class="token punctuation">)</span><span class="token punctuation">{</span>   this.price <span class="token operator">=</span> price<span class="token punctuation">;</span>   this.speed <span class="token operator">=</span> speed<span class="token punctuation">;</span><span class="token punctuation">}</span>// 抽象工厂实现对Car抽象类的继承VehicleFactory<span class="token punctuation">(</span>BMW,<span class="token string">'Car'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BMW.prototype.getPrice <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> this.price<span class="token punctuation">;</span><span class="token punctuation">}</span>BMW.prototype.getSpeed <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> this.speed<span class="token punctuation">;</span><span class="token punctuation">}</span>//兰博基尼汽车子类var Lamborghini <span class="token operator">=</span> function<span class="token punctuation">(</span>price, speed<span class="token punctuation">)</span><span class="token punctuation">{</span>   this.price <span class="token operator">=</span> price<span class="token punctuation">;</span>   this.speed <span class="token operator">=</span> speed<span class="token punctuation">;</span><span class="token punctuation">}</span>//抽象工厂实现对Car抽象类的继承VehicleFactory<span class="token punctuation">(</span>Lamborghini, <span class="token string">'Car'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Lamborghini.prototype.getPrice <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> this.price<span class="token punctuation">;</span><span class="token punctuation">}</span>Lamborghini.prototype.getSpeed <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> this.speed<span class="token punctuation">;</span><span class="token punctuation">}</span>//宇通汽车子类var YUTONG <span class="token operator">=</span> function<span class="token punctuation">(</span>price, passenger<span class="token punctuation">)</span><span class="token punctuation">{</span>  this.price <span class="token operator">=</span> price<span class="token punctuation">;</span>  this.passenger <span class="token operator">=</span> passenger<span class="token punctuation">;</span><span class="token punctuation">}</span>//抽象工厂实现对Bus抽象类的继承VehicleFactory<span class="token punctuation">(</span>YUTONG, <span class="token string">'Bus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>YUTONG.prototype.getPassengerNum <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> this.passenger<span class="token punctuation">;</span><span class="token punctuation">}</span>//奔驰汽车子类var BenzTruck <span class="token operator">=</span> function<span class="token punctuation">(</span>price, trainLoad<span class="token punctuation">)</span><span class="token punctuation">{</span>    this.price <span class="token operator">=</span> price<span class="token punctuation">;</span>    this.trainLoad <span class="token operator">=</span> trainLoad<span class="token punctuation">;</span><span class="token punctuation">}</span>// 抽象工厂实现对Truck抽象类的继承VehicleFactory<span class="token punctuation">(</span>BenzTruck, <span class="token string">'Truck'</span><span class="token punctuation">)</span>BenzTruck.prototype.getPrice <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> this.price<span class="token punctuation">;</span><span class="token punctuation">}</span>BenzTruck.prototype.getPrice <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> this.price<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>单例测试</p><pre class=" language-bash"><code class="language-bash">var truck <span class="token operator">=</span> new BenzTruck<span class="token punctuation">(</span>1000000, 1000<span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>truck.getPrice<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>   //1000000console.log<span class="token punctuation">(</span>truck.type<span class="token punctuation">)</span><span class="token punctuation">;</span>   //truck</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript设计模式 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 创建型设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式</title>
      <link href="/2019/07/19/gong-han-fang-fa-mo-shi/"/>
      <url>/2019/07/19/gong-han-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>工厂方法模式:通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p><p>需求：新来的一批广告资源需要投放，关于计算机培训的。一批是Java的，用于绿色字体。还有一批是PHP的，要用黄色字体，红色背景。</p><p>1、于是创建两个类，通过实例对象方式来完成这个需求</p><pre class=" language-bash"><code class="language-bash">//创建Java学科类var Java <span class="token operator">=</span> function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>    //将内容保存在content里面以备日后使用    this.content <span class="token operator">=</span> content<span class="token punctuation">;</span>    //创建对象时，通过闭包，直接执行，将内容按需求的样式插到页面当中    <span class="token punctuation">(</span>function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>        var div <span class="token operator">=</span> document.createElement<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        div.innerHTML <span class="token operator">=</span> content<span class="token punctuation">;</span>        div.style.color <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">;</span>        document.getElementById<span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>.appendChild<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//创建PHP学科类var Php <span class="token operator">=</span> function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>    this.content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">(</span>function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>        var div <span class="token operator">=</span> document.createElement<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        div.innerHTML <span class="token operator">=</span> content<span class="token punctuation">;</span>        div.style.color <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>        div.style.background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>        document.getElementById<span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>.appendChild<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、又来了一批广告，关于JavaScript的，然后根据简单工厂模式实现</p><pre class=" language-bash"><code class="language-bash">var Java <span class="token operator">=</span> function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>  //<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">}</span>var JavaScript <span class="token operator">=</span> function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>    this.content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">(</span>function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>       var div <span class="token operator">=</span> document.createElement<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       div.innerHTML <span class="token operator">=</span> content<span class="token punctuation">;</span>       div.style.background <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>       document.getElementById<span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>.appendChild<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//学科类工厂<span class="token keyword">function</span> JobFactory<span class="token punctuation">(</span>type,content<span class="token punctuation">)</span><span class="token punctuation">{</span>     switch<span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'Java'</span><span class="token keyword">:</span>          <span class="token keyword">return</span> new Java<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'php'</span><span class="token keyword">:</span>          <span class="token keyword">return</span> new Php<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'JavaScript'</span><span class="token keyword">:</span>          <span class="token keyword">return</span> new JavaScript<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>测试案例：JobFactory<span class="token punctuation">(</span><span class="token string">'JavaScript'</span>,<span class="token string">'JavaScript哪家强'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3、继续又来了一批UI学科，红色边框要是按照简单工厂模式的话，需要将简单工厂方法从重构了，不仅要添加新类，还要修改工厂函数,这就引入了工厂方法模式来解决问题。<br>工厂方法模式的本意是说将实际创建对象工作推迟到子类当中。这样核心类就成了抽象类，不过对于JavaScript不必深究，JavaScript没有像传统创建抽象类那样的方式轻易创建抽象类，所以在JavaScript中实现工厂方法模式就只是需要了解到核心思想即可。</p><p>引入安全模式类：<br>作用：屏蔽使用这对类的错误使用造成的错误，比如对于一个类（暂时成为Demo类），类是需要使用new关键字来创建，但是在使用的人来说，不知道这个对象（Demo）是一个类，在使用的时候很有可能忽略new关键字直接执行（var demo = Demo();）此时我们得到的就不是想要的结果。</p><p>//错误例子</p><pre class=" language-bash"><code class="language-bash">var Demo <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Demo.prototype <span class="token operator">=</span> <span class="token punctuation">{</span>     show <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token string">'成功获取'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>var demo <span class="token operator">=</span> new Demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo.show<span class="token punctuation">(</span><span class="token punctuation">)</span>  //成功获取var demo <span class="token operator">=</span> Demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo.show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Uncaught TypeError:Cannot <span class="token function">read</span> prototype <span class="token string">'show'</span> of undefined</code></pre><p>//使用安全模式（判断这个Demo是否是一个类）</p><pre class=" language-bash"><code class="language-bash">var Demo <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   if<span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>this instanceof Demo<span class="token punctuation">))</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> new Demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>var demo <span class="token operator">=</span> Demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo.show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//成功获取</code></pre><pre class=" language-bash"><code class="language-bash">var Factory  <span class="token operator">=</span> function<span class="token punctuation">(</span>type,content<span class="token punctuation">)</span><span class="token punctuation">{</span>   if<span class="token punctuation">(</span>this instanceof Factory<span class="token punctuation">)</span><span class="token punctuation">{</span>      var s <span class="token operator">=</span> new this<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>else<span class="token punctuation">{</span>      <span class="token keyword">return</span> new Factory<span class="token punctuation">(</span>type,content<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>// 工厂原型中设置创建所有类型数据对象的基类Factory.prototype <span class="token operator">=</span> <span class="token punctuation">{</span>     Java <span class="token keyword">:</span> function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>        // <span class="token punctuation">..</span><span class="token punctuation">..</span>     <span class="token punctuation">}</span>,     JavaScript <span class="token keyword">:</span> function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>       // <span class="token punctuation">..</span>.     <span class="token punctuation">}</span>,     UI <span class="token keyword">:</span> function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>       this.content <span class="token operator">=</span> content<span class="token punctuation">;</span>       <span class="token punctuation">(</span>function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>          var div <span class="token operator">=</span> document.createElement<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          div.innerHTML <span class="token operator">=</span> content<span class="token punctuation">;</span>          div.style.border <span class="token operator">=</span> <span class="token string">'1px solid red'</span><span class="token punctuation">;</span>          document.getElementById<span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>.appendChild<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>,     php <span class="token keyword">:</span> function<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>        // <span class="token punctuation">..</span><span class="token punctuation">..</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>//这样要是想要添加新类的话，只需要写在Factory这个工厂类的原型里面就可以了添加数据var data <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token punctuation">{</span>type <span class="token keyword">:</span> <span class="token string">'JavaScript'</span>,content <span class="token keyword">:</span> <span class="token string">'Javascript哪家强'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">{</span>type <span class="token keyword">:</span> <span class="token string">'java'</span>,content <span class="token keyword">:</span> <span class="token string">'java哪家强'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">{</span>type <span class="token keyword">:</span> <span class="token string">'php'</span>,content <span class="token keyword">:</span> <span class="token string">'php哪家强'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">{</span>type <span class="token keyword">:</span> <span class="token string">'UI'</span>,content <span class="token keyword">:</span> <span class="token string">'UI哪家强'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">]</span>for<span class="token punctuation">(</span>var i <span class="token operator">=</span> 6<span class="token punctuation">;</span> i <span class="token operator">>=</span>0<span class="token punctuation">;</span> i--<span class="token punctuation">)</span><span class="token punctuation">{</span>  Factory<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.type, s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript设计模式 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 创建型设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂模式</title>
      <link href="/2019/07/19/jian-dan-gong-han-mo-shi/"/>
      <url>/2019/07/19/jian-dan-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>简单工厂模式:又叫静态工厂方法,由一个工厂对象决定创建某一种产品对象类的实例主要是用来创建同一类对象~<br>使用场合：限制在创建单一对象<br>团队项目开发不同于个人开发，其对全局变量地限制很大，所以我们应该尽可能少地创建去全局变量。对于同一类对象在不同需求中地重复使用，很多时候不需要重复创建，代码复用是面向对象的一条准则。通过对简单工厂来创建一些对象，可以让这些对象共用一些资源又有一些私有资源。</p><p>登陆模块需求：用户名输入框这里如果用户输入的内容不符合规范就定义一个警示框警示一句‘用户名不能多于16个字母或数字’~</p><p>-<br>1、于是便有了下面的代码~</p><pre class=" language-bash"><code class="language-bash">var LoginAlert <span class="token operator">=</span> function<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">{</span>    this.content <span class="token operator">=</span> text<span class="token punctuation">;</span>  <span class="token punctuation">}</span>LoginAlert.prototype.show <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  //显示警示框<span class="token punctuation">}</span>var userNameAlert <span class="token operator">=</span> new LoginAlert<span class="token punctuation">(</span><span class="token string">"用户名不能多于16个字母或数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userNameAlert.show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、然后又来了一个需求，对于用户输入的密码，用户输入的密码错误时也提示一句“输入的密码不正确”，于是就用到了类的知识~</p><pre class=" language-bash"><code class="language-bash">var passwordAlert <span class="token operator">=</span> new LoginAlert<span class="token punctuation">(</span><span class="token string">'输入的密码不正确'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>passwordAlert.show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3、继续增加一个需求，用户登陆时如果用户名不存在就提示一句“您的用户名不存在，请重新输入，但是需要在警示框中添加一个注册按钮”，创建一个类这样的话以前的功能就复用不了~</p><pre class=" language-bash"><code class="language-bash">var LoginConfirm <span class="token operator">=</span> function<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">{</span>    this.content <span class="token operator">=</span> text<span class="token punctuation">;</span><span class="token punctuation">}</span>LoginConfirm.prototype.show <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //显示确认框<span class="token punctuation">}</span>var LoginFailConfirm <span class="token operator">=</span> new LoginConfirm<span class="token punctuation">(</span><span class="token string">'您的用户名不存在，请重新输入'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LoginFailConfirm.show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4、然后还有一个，登陆成功后给出一个自定义提示框，除了有确定取消按钮，也提示一句‘欢迎回来’，又是一个新类~</p><pre class=" language-bash"><code class="language-bash">var LoginPrompt <span class="token operator">=</span> function<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">{</span>    this.content <span class="token operator">=</span>text<span class="token punctuation">;</span><span class="token punctuation">}</span>LoginPrompt.prototype.show <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //显示提示框<span class="token punctuation">}</span></code></pre><p>上述存在着LoginAlert、LoginConfirm、LoginPrompt三个类，则这个问题可以通过简单工厂来解决，也就是一种模式，因为在每次创建时都要找对应的类,太麻烦了，而且在注册（regist）模块用login前缀不太好，所以最好封装在一个函数中，这样只需要记住这个函数，然后通过这个函数就可以创建需要的对象来直接使用，不止是一个人，其他人使用的时候不需要关注这个对象到底依赖于哪一个基类，只是需要记住这个函数就可以了，这个函数通常也叫工厂函数，这种模式叫简单工厂模式。<br>通俗讲法：体育商店里面有许多体育器材，有许多体育器材的介绍，你需要哪一种体育器材，看哪些体育器材的介绍，你只是需要问售货员就好了，不需要一个一个去找~<br>于是有了下面的代码：</p><pre class=" language-bash"><code class="language-bash">//篮球基类var Basketball <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    this.intro <span class="token operator">=</span> <span class="token string">'篮球在美国非常流行'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Basketball.prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    getMember <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console.log<span class="token punctuation">(</span><span class="token string">'每一个队伍需要5名队员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>,    getBallSize <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console.log<span class="token punctuation">(</span><span class="token string">'篮球很大'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//足球基类var Football <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    this.intro <span class="token operator">=</span> <span class="token string">'足球在世界范围内都非常流行'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Football.prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    getMember <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span><span class="token string">'每一个队伍需要11名队员'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>,    getBallSize <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span><span class="token string">'足球很大'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//网球基类var Tennis <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    this.intro <span class="token operator">=</span> <span class="token string">'每年都有需要的网球比赛'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Tennis.prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    getMember <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console.log<span class="token punctuation">(</span><span class="token string">'每个队伍需要一名队员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>,    getBallSize <span class="token keyword">:</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console.log<span class="token punctuation">(</span><span class="token string">'网球很小'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//运动工厂var SportsFactory <span class="token operator">=</span> function<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    switch<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">case</span> <span class="token string">'NBA'</span><span class="token keyword">:</span>          <span class="token keyword">return</span> new Basketball<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">'wordCup'</span><span class="token keyword">:</span>          <span class="token keyword">return</span> new Football<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">'FrenchOpen'</span><span class="token keyword">:</span>          <span class="token keyword">return</span> new Tennis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>要是想要踢足球的话，只需要告诉店员要买一个足球即可。使用这个商店工厂时仅仅需要记住SportsFactory这个工厂对象即可~</p><pre class=" language-bash"><code class="language-bash">//为世界杯创建一个足球，只需要记住运动工厂SportsFactory，调用并创建var footnall  <span class="token operator">=</span> SportsFactory<span class="token punctuation">(</span><span class="token string">'wordCup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>footnall<span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>footnall.intro<span class="token punctuation">)</span><span class="token punctuation">;</span>footnall.getMember<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>非常简单，类似地创建自定义弹框~</p><pre class=" language-bash"><code class="language-bash">var PopFactory <span class="token operator">=</span> function<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>   switch<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">case</span> <span class="token string">'alert'</span><span class="token keyword">:</span>         <span class="token keyword">return</span> new LoginAlert<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">case</span> <span class="token string">'confirm'</span><span class="token keyword">:</span>         <span class="token keyword">return</span> new LoginConfirm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">case</span> <span class="token string">'prompt'</span><span class="token keyword">:</span>         <span class="token keyword">return</span> new LoginPrompt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一个对象也可以代替许多类<br>例子：比如想要创建一些书，那么这些书就都有一些相似的地方，比如目录、页码等。也有一些不相似的地方，如书名、出版时间、书的类型等，对于创建的对象相似的属性就像上面一样处理，对于不同的属性就要针对性地处理，比如我们将不同属性作为参数传递来处理~<br>比如下面的：</p><pre class=" language-bash"><code class="language-bash">//工厂模式<span class="token keyword">function</span> createBook<span class="token punctuation">(</span>name,time,type<span class="token punctuation">)</span><span class="token punctuation">{</span>   var o <span class="token operator">=</span> new Object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   o.name <span class="token operator">=</span> name<span class="token punctuation">;</span>   o.time <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">;</span>   o.getName <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span>this.name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>var book1 <span class="token operator">=</span> createBook<span class="token punctuation">(</span><span class="token string">"js book"</span>,2018,<span class="token string">"js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var book2 <span class="token operator">=</span> createBook<span class="token punctuation">(</span><span class="token string">"css book"</span>,<span class="token string">"2019"</span>,<span class="token string">"css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book1.getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book2.getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述是没有继承任何类或对象,要是想要寄生式继承的话如下</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> createPop<span class="token punctuation">(</span>type,text<span class="token punctuation">)</span><span class="token punctuation">{</span>  var 0 <span class="token operator">=</span> new Object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o.content <span class="token operator">=</span> text<span class="token punctuation">;</span>  o.show <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //显示方法  <span class="token punctuation">}</span><span class="token punctuation">;</span>  if<span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'alert'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //警示框差异部分  <span class="token punctuation">}</span>  if<span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'prompt'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //提示框差异部分  <span class="token punctuation">}</span>  if<span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'confirm'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //确认框差异部分  <span class="token punctuation">}</span>  //将对象返回  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span>//创建警示框var userNameAlert <span class="token operator">=</span> createPop<span class="token punctuation">(</span><span class="token string">'alert'</span>,<span class="token string">'用户名只能是26个字母'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript设计模式 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 创建型设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2019/07/17/git/"/>
      <url>/2019/07/17/git/</url>
      
        <content type="html"><![CDATA[<h1 id="just-test"><a href="#just-test" class="headerlink" title="just test"></a>just test</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My first</title>
      <link href="/2019/07/16/my-first/"/>
      <url>/2019/07/16/my-first/</url>
      
        <content type="html"><![CDATA[<hr><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你好</title>
      <link href="/2019/07/15/hello-world/"/>
      <url>/2019/07/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
