<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤单背影</title>
  
  <subtitle>技术分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lvdingfen.github.io/"/>
  <updated>2019-07-23T07:54:35.015Z</updated>
  <id>https://lvdingfen.github.io/</id>
  
  <author>
    <name>jack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes</title>
    <link href="https://lvdingfen.github.io/2019/07/24/kubernetes/"/>
    <id>https://lvdingfen.github.io/2019/07/24/kubernetes/</id>
    <published>2019-07-23T19:37:13.000Z</published>
    <updated>2019-07-23T07:54:35.015Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;img src=&quot;/2019/07/24/kubernetes/1.jpg&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="https://lvdingfen.github.io/2019/07/23/yuan-xing-mo-shi/"/>
    <id>https://lvdingfen.github.io/2019/07/23/yuan-xing-mo-shi/</id>
    <published>2019-07-23T14:31:02.000Z</published>
    <updated>2019-07-23T02:31:02.455Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lvdingfen.github.io/2019/07/23/package/"/>
    <id>https://lvdingfen.github.io/2019/07/23/package/</id>
    <published>2019-07-23T07:54:12.340Z</published>
    <updated>2019-07-23T07:54:12.341Z</updated>
    
    <summary type="html">
    
      
      
        
        
          {&quot;dependencies&quot;:{&quot;hexo-asset-image&quot;:&quot;^1.0.0&quot;}}
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://lvdingfen.github.io/2019/07/22/jian-zao-zhe-mo-shi/"/>
    <id>https://lvdingfen.github.io/2019/07/22/jian-zao-zhe-mo-shi/</id>
    <published>2019-07-21T21:41:59.000Z</published>
    <updated>2019-07-23T07:21:32.731Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;建造者模式:将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示~&lt;/p&gt;
&lt;p&gt;工厂模式主要是为了创建对象实例或者类簇(抽象工厂)，关心的是最终产出(创建)的是什么。不关心你创建的整一个过程，仅仅需要知道你最终创建的结果。所以抽象工厂模式我们得到的都是
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://lvdingfen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript设计模式" scheme="https://lvdingfen.github.io/tags/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="JavaScript" scheme="https://lvdingfen.github.io/tags/JavaScript/"/>
    
      <category term="创建型设计模式" scheme="https://lvdingfen.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="https://lvdingfen.github.io/2019/07/20/chou-xiang-gong-han-mo-shi/"/>
    <id>https://lvdingfen.github.io/2019/07/20/chou-xiang-gong-han-mo-shi/</id>
    <published>2019-07-19T19:37:17.000Z</published>
    <updated>2019-07-23T07:22:29.900Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;抽象工厂模式:通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例&lt;/p&gt;
&lt;p&gt;下面代码的作用：创建这个car类其实什么都不能做，创建时没有任何属性，然而原型上的prototype上的方法也不能使用，否则会报错。但是在继承上却很有用的，因为定义了一
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://lvdingfen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript设计模式" scheme="https://lvdingfen.github.io/tags/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="JavaScript" scheme="https://lvdingfen.github.io/tags/JavaScript/"/>
    
      <category term="创建型设计模式" scheme="https://lvdingfen.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="https://lvdingfen.github.io/2019/07/19/gong-han-fang-fa-mo-shi/"/>
    <id>https://lvdingfen.github.io/2019/07/19/gong-han-fang-fa-mo-shi/</id>
    <published>2019-07-19T02:21:49.000Z</published>
    <updated>2019-07-23T07:22:21.381Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;工厂方法模式:通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。&lt;/p&gt;
&lt;p&gt;需求：新来的一批广告资源需要投放，关于计算机培训的。一批是Java的，用于绿色字体。还有一批是PHP的，要用黄色字体，红色背景。&lt;/p&gt;
&lt;p&gt;1、于是创建两个类，通过实例对象方式来
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://lvdingfen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript设计模式" scheme="https://lvdingfen.github.io/tags/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="JavaScript" scheme="https://lvdingfen.github.io/tags/JavaScript/"/>
    
      <category term="创建型设计模式" scheme="https://lvdingfen.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="https://lvdingfen.github.io/2019/07/19/jian-dan-gong-han-mo-shi/"/>
    <id>https://lvdingfen.github.io/2019/07/19/jian-dan-gong-han-mo-shi/</id>
    <published>2019-07-18T20:33:08.000Z</published>
    <updated>2019-07-23T07:22:16.976Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;简单工厂模式:又叫静态工厂方法,由一个工厂对象决定创建某一种产品对象类的实例主要是用来创建同一类对象~&lt;br&gt;使用场合：限制在创建单一对象&lt;br&gt;团队项目开发不同于个人开发，其对全局变量地限制很大，所以我们应该尽可能少地创建去全局变量。对于同一类对象在不同需求中地重复使用，
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://lvdingfen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript设计模式" scheme="https://lvdingfen.github.io/tags/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="JavaScript" scheme="https://lvdingfen.github.io/tags/JavaScript/"/>
    
      <category term="创建型设计模式" scheme="https://lvdingfen.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://lvdingfen.github.io/2019/07/17/git/"/>
    <id>https://lvdingfen.github.io/2019/07/17/git/</id>
    <published>2019-07-17T02:37:02.000Z</published>
    <updated>2019-07-16T14:41:33.551Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;just-test&quot;&gt;&lt;a href=&quot;#just-test&quot; class=&quot;headerlink&quot; title=&quot;just test&quot;&gt;&lt;/a&gt;just
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My first</title>
    <link href="https://lvdingfen.github.io/2019/07/16/my-first/"/>
    <id>https://lvdingfen.github.io/2019/07/16/my-first/</id>
    <published>2019-07-16T12:46:08.000Z</published>
    <updated>2019-07-16T00:48:02.011Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;hr&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你好</title>
    <link href="https://lvdingfen.github.io/2019/07/15/hello-world/"/>
    <id>https://lvdingfen.github.io/2019/07/15/hello-world/</id>
    <published>2019-07-15T14:14:32.215Z</published>
    <updated>2019-07-16T00:41:04.400Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a
        
      
    
    </summary>
    
    
  </entry>
  
</feed>
